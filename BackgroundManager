package Managers;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.sound.sampled.LineListener;

import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;

public class BackgroundManager {

	Sprite node, line;
	private final float _DIST = 450;
	int index=0;
	
	private List<Float> sizeList = new ArrayList<Float>();
	private List<Float> xList = new ArrayList<Float>();
	private List<Float> yList = new ArrayList<Float>();
	private List<Sprite> nodeList = new ArrayList<Sprite>();
	private List<ArrayList<Sprite>> lineList = new ArrayList<ArrayList<Sprite>>();
	
	public BackgroundManager(Sprite node, Sprite line) {
		this.node = node;
		this.line = line;
	}
	
	public void drawBackground(SpriteBatch spriteBatch) {
		
		initializeBackground();
		
		for(Sprite n1 : nodeList) {
			
			n1.draw(spriteBatch);
		}
		for(ArrayList<Sprite> n1 : lineList) {
			lineList.removeAll(n1);
			update(n1);
			for(Sprite n2 : n1) {
				n2.draw(spriteBatch);
			}
		}
	}
	
	private void update(ArrayList<Sprite> n1) {
		for(int i=0;i<nodeList.size();i++) {
			if(getDist(nodeList.get(lineList.indexOf(n1)).getX(), nodeList.get(lineList.indexOf(n1)).getY(), nodeList.get(i).getX(), nodeList.get(i).getY()) < _DIST) {
				Sprite newLine = new Sprite(line);
				newLine.setSize(getDist(nodeList.get(lineList.indexOf(n1)).getX(), nodeList.get(lineList.indexOf(n1)).getY(), nodeList.get(i).getX(), nodeList.get(i).getY()), 13);
				newLine.setRotation(getAngle(nodeList.get(lineList.indexOf(n1)), nodeList.get(i)));
				lineList.get(lineList.indexOf(n1)).add(newLine);
			}
		}
		
		for(int i=0;i<nodeList.size();i++) {
			lineList.get(i).removeAll(lineList.get(i));
			for(int j=0;j<nodeList.size();j++) {

			}
		}
//		if(getDist(n1.getX(), n1.getY(), n2.getX(), n2.getY()) < _DIST) {
//			
//			getAngle(n1, n2);
//		}
	}
	private void initializeBackground() {
		switch(index) {
		case 0: createSize();
		case 1: createNodes();
		default: break;
		}
		
	}
	private void createLines() {
		for(int i=0;i<nodeList.size();i++) {
			for(int j=0;j<nodeList.size();j++) {
				
			}
		}
	}
	private void createNodes() {
		for(int i=0;i<sizeList.size();i++) {
			Sprite newNode = new Sprite(node);
			node.setScale(sizeList.get(i));
			node.setPosition(random(144)*10, random(256)*10);
			nodeList.add(newNode);
			if(i==sizeList.size()-1) {index=2;}
		}
	}
	private void createSize() {
		if(sizeList.size()<10) {
			sizeList.add(.3f+(random(4)/10));
		} else {
			index=1;
		}
	}
	
	
	private float getAngle(Sprite n1, Sprite n2) {
		return (float) (MathUtils.radDeg*(Math.atan2(n1.getY()-n2.getY(), n1.getX()-n2.getX())));
	}
	private static float random(int i) {
		Random random = new Random();
		float randomR = random.nextInt(i);
		return (randomR);
	}
	private float getDist(float x1, float y1, float x2, float y2) {
		return (float) Math.sqrt(sqr(x1, y1, x2, y2));
	}
	private float sqr(float x1, float y1, float x2, float y2) {
		return ((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1));
	}
}
