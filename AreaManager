package Managers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.Sprite;

public class AreaManager {

	private int index=0;
	private List<Float> sDList = new ArrayList<Float>();
	private Float[] sDArray = {0f,0f,0f,0f,0f,0f,0f,0f,0f,0f};
	private List<Sprite> sVList = new ArrayList<Sprite>();
	private List<Sprite> closestNodesList = new ArrayList<Sprite>();
	private Sprite sprite;
	private List<Float> areaList = new ArrayList<Float>();
	private int switchIndex=0;
	int swInd=0;
	
	public AreaManager(Sprite sprite) {
		this.sprite = sprite;
	}
	public void updateShape(List<Sprite> list) {
		if(closestNodesList.size()<2) {
			Sprite newDot = new Sprite(sprite);
			closestNodesList.add(newDot);
		}
		if(sVList.size()<10) {
			for(int i=0;i<10;i++) {
				Sprite newDot = new Sprite(sprite);
				sVList.add(newDot);
			}
		}
		
		if(sDList.isEmpty()) {
			sDList.addAll(Arrays.asList(sDArray));
		}
		if(index==0) {
			for(int i=0;i<list.size();i++) {
				for(int j=0;j<list.size();j++) {
					if(sDList.get(index)<getDist(list.get(i).getX(), list.get(i).getY(), list.get(j).getX(), list.get(j).getY())) {
						sDList.set(index, getDist(list.get(i).getX(), list.get(i).getY(), list.get(j).getX(), list.get(j).getY()));
						sVList.set(0, list.get(i));
						sVList.set(1, list.get(j));
					}
					if(i==list.size()-1 && j==list.size()-1) {index=3;}
				}
			}
		} else {
			while(index<10) {
				findNewNode(list);				
			}
		}
	}
	
	private void findNewNode(List<Sprite> list) {
		switch(switchIndex) {
		case 0: switchCase(list);
		case 1: compareAreas();
		}
	}
	private void compareAreas() {
		float pivot=0;
		for(int i=0;i<areaList.size();i++) {
			if(pivot<areaList.get(i) && !sVList.contains(sVList.indexOf(i))) {
				pivot=areaList.get(i);
				sVList.set(index, sVList.get(i));
			}
			if(i==areaList.size()) {
				areaList.removeAll(areaList);
				swInd=0;
				switchIndex=0;
			}
		}
	}
	private void switchCase(List<Sprite> list) {
		for(int i=0;i<list.size();i++) {
			switch(swInd) {
			case 0: findSmallestElements(i, list);
			case 1: areaList.add(findArea(i, list));
			}
		}
	}
	
	private void findSmallestElements(int i, List<Sprite> list) {
		int ind=0;
		switch(ind) {
		case 0: 
			float pivot = 2560;
			for(int j=0;j<sVList.size();j++) {
				if(getDist(list.get(i).getX(), list.get(i).getY(), sVList.get(j).getX(), sVList.get(j).getY())<pivot) {
					pivot = getDist(list.get(i).getX(), list.get(i).getY(), sVList.get(j).getX(), sVList.get(j).getY());
					closestNodesList.set(0, sVList.get(j));
				}
				if(j==sVList.size()-1) {ind++;}
			}
		case 1:
			float piv = 2560;
			for(int j=0;j<sVList.size();j++) {
				if(getDist(list.get(i).getX(), list.get(i).getY(), sVList.get(j).getX(), sVList.get(j).getY())<piv && !closestNodesList.contains(closestNodesList.get(0))) {
					piv = getDist(list.get(i).getX(), list.get(i).getY(), sVList.get(j).getX(), sVList.get(j).getY());
					closestNodesList.set(1, sVList.get(j));
					swInd++;
					ind=0;
				}
			}
		}
	}
	private float findArea(int i, List<Sprite> list) {
		float b=0;
		float h=0;
		float Fm=0;
		float Pm=0;
		float b0=0;
		float b1=0;
		float xInt=0;
		float yInt=0;
		
		Fm=(closestNodesList.get(1).getY()-closestNodesList.get(0).getY())/(closestNodesList.get(1).getX()-closestNodesList.get(0).getX());
		Pm=getMInverse(closestNodesList.get(1).getY()-closestNodesList.get(0).getY(), closestNodesList.get(1).getX()-closestNodesList.get(0).getX());
		b0=closestNodesList.get(0).getY()-(Fm*closestNodesList.get(0).getX());
		
		b1=closestNodesList.get(1).getY()-(Pm*closestNodesList.get(1).getX());
		xInt=(b1-b0)/(Fm-Pm);
		yInt=(Fm*xInt)+b0;
		
		b=getDist(closestNodesList.get(0).getX(), closestNodesList.get(0).getY(), closestNodesList.get(1).getX(), closestNodesList.get(1).getY());
		h=getDist(list.get(i).getX(), list.get(i).getY(), xInt, yInt);
		
		if(i==list.size()-1) {switchIndex++;}
		
		return (b*h)/2;
		
	}
	
	public void draw(Batch batch) {
		for(Sprite sprite : sVList) {
			sprite.setColor(1, 0, 0, 1);
			sprite.draw(batch);
		}
	}
	
	private float getDist(float x1, float y1, float x2, float y2) {
		return (float) Math.sqrt(sqr(x1, y1, x2, y2));
	}
	private float sqr(float x1, float y1, float x2, float y2) {
		return ((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1));
	}
	private float getMInverse(float y, float x) {
		return -(x/y);
	}
}
